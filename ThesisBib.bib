
@book{abelson_structure_1999,
  address = {London, UK, UK},
  edition = {Second},
  title = {Structure and {{Interpretation}} of {{Computer Programs}}},
  isbn = {0-07-000484-6},
  language = {English},
  timestamp = {2017-05-26T14:27:24Z},
  urldate = {2017-05-26},
  publisher = {{McGraw-Hill Book Company}},
  author = {Abelson, Harold and Sussman, Gerald Jay and Sussman, Julie},
  year = {1999}
}

@inproceedings{cooper_embedding_2006,
  title = {Embedding {{Dynamic Dataflow}} in a {{Call}}-by-{{Value Language}}},
  doi = {10.1007/11693024_20},
  abstract = {This paper describes FrTime, an extension of Scheme designed for writing interactive applications. Inspired by functional reactive programming, the language embeds dynamic dataflow within a call-by-value functional language. The essence of the embedding is to make program expressions evaluate to nodes in a dataflow graph. This strategy eases importation of legacy code and permits incremental program construction. We have integrated FrTime with the DrScheme programming environment and have used it to develop several novel applications. We describe FrTime's design and implementation in detail and present a formal semantics of its evaluation model.},
  language = {en},
  timestamp = {2017-06-03T09:16:10Z},
  booktitle = {Programming {{Languages}} and {{Systems}}},
  publisher = {{Springer, Berlin, Heidelberg}},
  author = {Cooper, Gregory H. and Krishnamurthi, Shriram},
  month = mar,
  year = {2006},
  pages = {294--308},
  file = {Full Text PDF:C\:\\Users\\alexa\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\8oufbymn.default\\zotero\\storage\\9Q4DTSA2\\Cooper and Krishnamurthi - 2006 - Embedding Dynamic Dataflow in a Call-by-Value Lang.pdf:application/pdf;Snapshot:C\:\\Users\\alexa\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\8oufbymn.default\\zotero\\storage\\DRWU2CTA\\11693024_20.html:text/html}
}

@article{saey_extensible_2017,
  title = {An {{Extensible Virtual Machine Design}} for the {{Execution}} of {{High}}-Level {{Languages}} on {{Tagged}}-Token {{Dataflow Machines}}},
  timestamp = {2017-06-05T12:27:13Z},
  author = {Saey, Mathijs and De Koster, Joeri and B. Sartor, Jennifer and De Meuter, Wolfgang},
  year = {2017}
}

@misc{_observable_2017,
  title = {Observable | {{RxJS API Document}}},
  timestamp = {2017-06-01T11:04:11Z},
  urldate = {2017-06-01},
  howpublished = {\url{http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html}},
  month = jun,
  year = {2017},
  file = {Observable | RxJS API Document:C\:\\Users\\alexa\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\8oufbymn.default\\zotero\\storage\\SW3SET38\\Observable.js~Observable.html:text/html}
}

@misc{czaplicki_elm:_2012,
  title = {Elm: {{Concurrent FRP}} for Functional {{GUIs}}},
  timestamp = {2017-06-04T08:37:09Z},
  author = {Czaplicki, Evan},
  year = {2012},
  file = {Czaplicki.html:C\:\\Users\\alexa\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\8oufbymn.default\\zotero\\storage\\FV4T9JDK\\Czaplicki.html:text/html}
}

@inproceedings{burchett_lowering:_2007,
  address = {New York, NY, USA},
  series = {PEPM '07},
  title = {Lowering: {{A Static Optimization Technique}} for {{Transparent Functional Reactivity}}},
  isbn = {978-1-59593-620-2},
  shorttitle = {Lowering},
  doi = {10.1145/1244381.1244393},
  abstract = {Functional Reactive Programming (FRP) extends traditional functional programming with dataflow evaluation, making it possible to write interactive programs in a declarative style. An FRP language creates a dynamic graph of data dependencies and reacts to changes by propagating updates through the graph. In a transparent FRP language, the primitive operators are implicitly lifted, so they construct graph nodes when they are applied to time-varying values. This model has some attractive properties, but it tends to produce a large graph that is costly to maintain. In this paper, we develop a transformation we call lowering, which improves performance by reducing the size of the graph. We present a static analysis that guides the sound application of this optimization, and we present benchmark results that demonstrate dramatic improvements in both speed and memory usage for real programs.},
  timestamp = {2017-06-05T08:54:45Z},
  booktitle = {Proceedings of the 2007 {{ACM SIGPLAN Symposium}} on {{Partial Evaluation}} and {{Semantics}}-Based {{Program Manipulation}}},
  publisher = {{ACM}},
  author = {Burchett, Kimberley and Cooper, Gregory H. and Krishnamurthi, Shriram},
  year = {2007},
  keywords = {frp,FrTime,functional programming,lifting,lowering,optimization,reactive programming,scheme,static analysis},
  pages = {71--80},
  file = {paper.pdf:C\:\\Users\\alexa\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\8oufbymn.default\\zotero\\storage\\UQRI8V2H\\paper.pdf:application/pdf}
}

@mastersthesis{saey_towards_2014,
  type = {masters},
  title = {Towards a {{Full Dataflow Stack}}: {{A Research Infrastructure}} for the {{Exploration}} of {{Dataflow Execution Models}}},
  timestamp = {2017-06-05T12:54:23Z},
  school = {Free University Brussels},
  author = {Saey, Mathijs and Prof. Dr. De Meuter, Wolfgang and Dr. Vandriessche, Yves and Dr. Marr, Stefan},
  year = {2014},
  file = {thesis_mathsaey_digital.pdf:C\:\\Users\\alexa\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\8oufbymn.default\\zotero\\storage\\923H92SJ\\thesis_mathsaey_digital.pdf:application/pdf}
}

@article{arvind_executing_1990,
  title = {Executing a {{Program}} on the {{MIT Tagged}}-{{Token Dataflow Architecture}}},
  volume = {39},
  issn = {0018-9340},
  doi = {10.1109/12.48862},
  abstract = {The MIT Tagged-Token Dataflow Project has an unconventional, but integrated approach to general-purpose high-performance parallel computing. Rather than extending conventional sequential languages, Id, a high-level language with fine-grained parallelism and determinacy implicit in its operational semantics, is used. Id programs are compiled to dynamic dataflow graphs, which constitute a parallel machine language. Dataflow graphs are directly executed on the MIT tagged-token dataglow architecture (TTDA), a multiprocessor architecture. An overview of current thinking on dataflow architecture is provided by describing example Id programs, their compilation to dataflow graphs, and their execution on the TTDA. Related work and the status of the project are described.},
  timestamp = {2017-06-05T09:36:07Z},
  number = {3},
  journal = {IEEE Trans. Comput.},
  author = {Arvind, K. and Nikhil, Rishiyur S.},
  month = mar,
  year = {1990},
  keywords = {compilation,determinacy,dynamic dataflow graphs,fine-grained parallelism,general-purpose high-performance parallel computing,high-level language,high level languages,Id,MIT tagged-token dataflow architecture,multiprocessor architecture,operational semantics,parallel architectures,parallel machine language,parallel programming,program compilers.},
  pages = {300--318}
}

@article{johnston_advances_2004,
  title = {Advances in {{Dataflow Programming Languages}}},
  volume = {36},
  issn = {0360-0300},
  doi = {10.1145/1013208.1013209},
  abstract = {Many developments have taken place within dataflow programming languages in the past decade. In particular, there has been a great deal of activity and advancement in the field of dataflow visual programming languages. The motivation for this article is to review the content of these recent developments and how they came about. It is supported by an initial review of dataflow programming in the 1970s and 1980s that led to current topics of research. It then discusses how dataflow programming evolved toward a hybrid von Neumann dataflow formulation, and adopted a more coarse-grained approach. Recent trends toward dataflow visual programming languages are then discussed with reference to key graphical dataflow languages and their development environments. Finally, the article details four key open topics in dataflow programming languages.},
  timestamp = {2017-06-05T12:41:21Z},
  number = {1},
  journal = {ACM Comput. Surv.},
  author = {Johnston, Wesley M. and Hanna, J. R. Paul and Millar, Richard J.},
  month = mar,
  year = {2004},
  keywords = {component software,co-ordination languages,dataflow,data flow visual programming,graphical programming,multithreading,Software Engineering},
  pages = {1--34}
}

@inproceedings{peterson_parallel_2000,
  title = {Parallel {{Functional Reactive Programming}}},
  doi = {10.1007/3-540-46584-7_2},
  abstract = {In this paper, we demonstrate how Functional Reactive Programming (FRP), a framework for the description of interactive systems, can be extended to encompass parallel systems. FRP is based on Haskell, a purely functional programming language, and incorporates the concepts of time variation and reactivity.Parallel FRP serves as a declarative system model that may be transformed into a parallel implementation using the standard program transformation techniques of functional programming. The semantics of parallel FRP include non-determinism, enhancing opportunities to introduce parallelism. We demonstrate a variety of program transformations based on parallel FRP and show how a FRP model may be transformed into explicitly parallel code. Parallel FRP is implemented using the Linda programming system to handle the underlying parallelism. As an example of parallel FRP, we show how a specification for a web-based online auctioning system can be transformed into a parallel implementation.},
  language = {en},
  timestamp = {2017-06-08T10:10:40Z},
  booktitle = {Practical {{Aspects}} of {{Declarative Languages}}},
  publisher = {{Springer, Berlin, Heidelberg}},
  author = {Peterson, John and Trifonov, Valery and Serjantov, Andrei},
  month = jan,
  year = {2000},
  pages = {16--31},
  file = {997a850a29058bd8d83e253dbfdfade8da4b.pdf:C\:\\Users\\alexa\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\8oufbymn.default\\zotero\\storage\\TU8Q6JKN\\997a850a29058bd8d83e253dbfdfade8da4b.pdf:application/pdf;Snapshot:C\:\\Users\\alexa\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\8oufbymn.default\\zotero\\storage\\C5D7HNRC\\3-540-46584-7_2.html:text/html}
}

@incollection{harel_development_1985,
  title = {On the {{Development}} of {{Reactive Systems}}},
  abstract = {Some observations are made concerning the process of developing complex systems. A broad class of systems, termed reactive, is singled out as being particularly problematic when it comes to finding satisfactory methods for behavioral description. In this paper we recommend the recently proposed statechart method for this purpose. Moreover, it is observed that most reactive systems cannot be developed in a linear stepwise fashion, but, rather, give rise to a two-dimensional development process, featuring behavioral aspects in the one dimension and implementational ones in the other. Concurrency may occur in both dimensions, as orthogonality of states in the one and as parallelism of subsystems in the other. A preliminary approach to working one's way through this ``magic square'' of system development is then presented. The ideas described herein seem to be relevant to a wide variety of application areas.},
  language = {en},
  timestamp = {2017-06-08T13:12:35Z},
  urldate = {2017-06-08},
  booktitle = {Logics and {{Models}} of {{Concurrent Systems}}},
  publisher = {{Springer, Berlin, Heidelberg}},
  author = {Harel, D. and Pnueli, A.},
  year = {1985},
  pages = {477--498},
  file = {Snapshot:C\:\\Users\\alexa\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\8oufbymn.default\\zotero\\storage\\UMSTIMB7\\978-3-642-82453-1_17.html:text/html},
  doi = {10.1007/978-3-642-82453-1_17}
}

@article{veen_dataflow_1986,
  title = {Dataflow {{Machine Architecture}}},
  volume = {18},
  issn = {0360-0300},
  doi = {10.1145/27633.28055},
  abstract = {Dataflow machines are programmable computers of which the hardware is optimized for fine-grain data-driven parallel computation. The principles and complications of data-driven execution are explained, as well as the advantages and costs of fine-grain parallelism. A general model for a dataflow machine is presented and the major design options are discussed.
Most dataflow machines described in the literature are surveyed on the basis of this model and its associated technology. For general-purpose computing the most promising dataflow machines are those that employ packet-switching communication and support general recursion. Such a recursion mechanism requires an extremely fast mechanism to map a sparsely occupied virtual space to a physical space of realistic size. No solution has yet proved fully satisfactory.
A working prototype of one processing element is described in detail. On the basis of experience with this prototype, some of the objections raised against the dataflow approach are discussed. It appears that the overhead due to fine-grain parallelism can be made acceptable by sophisticated compiling and employing special hardware for the storage of data structures. Many computing-intensive programs show sufficient parallelism. In fact, a major problem is to restrain parallelism when machine resources tend to get overloaded. Another issue that requires further investigation is the distribution of computation and data structures over the processing elements.},
  timestamp = {2017-06-08T13:14:41Z},
  number = {4},
  journal = {ACM Comput. Surv.},
  author = {Veen, Arthur H.},
  month = dec,
  year = {1986},
  pages = {365--396}
}

@article{drechsler_optimizing_2014,
  title = {Optimizing {{Distributed REScala}}},
  timestamp = {2017-06-15T19:30:00Z},
  author = {Drechsler, Joscha and Salvaneschi, Guido},
  year = {2014},
  file = {2014_Distributed_REScala_An_Update_Algorithm_for_Distributed_Reactive_Programming_pdf.pdf:C\:\\Users\\alexa\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\8oufbymn.default\\zotero\\storage\\4ISCMWE4\\2014_Distributed_REScala_An_Update_Algorithm_for_Distributed_Reactive_Programming_pdf.pdf:application/pdf}
}


